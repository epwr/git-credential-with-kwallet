#!/bin/env ruby
#
# Author: Eric Power
#
# Description:
#     Allows git-credential to interact with KDE Wallet (KWallet), using Kwallet's
#     DBUS interface.
#
#     Requires qdbus and a kwallet version that provides Kwallet's kwalletd5 QBUS interface.
#
#     File Structure:
#     Sections can be quickly accessed by searching for X. NAME OF SECTION. Each section
#     has a comment that describes it's function in general.
#         1. Global Variables
#         2. QBUS API Functions
#         3. Control Flow Functions
#
#     Released under the MIT License.

# 1. Global Variables
#     Sets global variables which are used to configure the program.

VERBOSE = false # VERBOSE = true can be used for debugging (git won't like it).
APP_NAME = "epwr-kwallet-git-credentials"
KWALLET_FOLDER = "git-credentials"
QDBUS_EXECUTABLES = ["qdbus", "qdbus-qt5"]


# 2. QBUS API Functions
#     qdbus is extremely flexible, but calling it directly is verbose and requires
#     error checking. These functions abstract that work away from the control flow
#     functions.

# Using the qdbus org.kde.kwalletd5 /modules/kwalletd5, calls the provided method
# with the provided arguments.
def run_kwd5 command

  success = false
  output = nil
  QDBUS_EXECUTABLES.each do |exe|
    begin
      output = `#{exe} org.kde.kwalletd5 /modules/kwalletd5 #{command}`.strip()
    rescue Errno::ENOENT
    else
      success = true
      break
    end
  end

  if !success
    STDERR.puts "Error: could not find any qdbus executables in PATH. Tried #{QDBUS_EXECUTABLES}"
    exit(1)
  end

  if output == "Invalid number of parameters\n"
    STDERR.puts "Error - invalid number of parameters. Ran: qdbus org.kde.kwalletd5 /modules/kwalletd5 #{command}"
    exit(1)
  end
  
  output
end

# puts the string if VERBOSE flag is true. Used for debugging.
def vputs string
  if VERBOSE
    puts string
  end
end

# Calls the createFolder method. Used to create a folder to store all the credentials
# that git-credential-with-kwallet will store. Folder name set by KWALLET_FOLDER global.
def create_folder(wallet_id, folder)
  folder_output = run_kwd5 "createFolder #{wallet_id} #{folder} #{APP_NAME}"
  vputs folder_output
end

# Calls the open method - which returns the wallet_id if the wallet is open, and
# prompts the user if the wallet is not yet open.
def get_wallet_id wallet_name
  w_id = run_kwd5 "org.kde.KWallet.open #{wallet_name} 0 #{APP_NAME}"
  vputs "Wallet ID: #{w_id}"
  w_id
end

# Calls the readEntry method. Used to access values stored in a wallet > folder.
def get_entry(wallet_id, folder, key)
  output = run_kwd5 "readEntry #{wallet_id} #{folder} #{key} #{APP_NAME}"
  vputs "The value for '#{wallet_id}' > #{folder}[#{key}] is: #{output}"
  output
end

# Calls the hasFolder method. Used to ensure that a folder exists when trying to
# store a credential.
def has_folder(wallet_id, folder)
  run_kwd5 "hasFolder #{wallet_id} #{folder} #{APP_NAME}" == "true"
end

# Calls the folderList method. Used for debugging.
def list_folders wallet_id
  folders = run_kwd5 "folderList #{wallet_id} #{APP_NAME}"
  puts "Folders: "
  folders.split("\n").each { |folder|
    puts "\t#{folder}"}
end

# Calls the writeEntry method. Used to store values in a wallet > folder.
def write_entry(wallet_id, folder, key, value)
  output = run_kwd5 "writeEntry #{wallet_id} #{folder} #{key} '#{value}' #{APP_NAME}"
  if output == "0"
    vputs "Wrote (#{key} -> #{value}) to #{wallet_id} > #{folder}."
  else
    vputs "Failed to write (#{key} -> #{value}) to #{wallet_id} > #{folder}."
  end
end

# Calls the hasEntry method. Used for debugging.
def entry_exists?(wallet_id, folder, key)
  value = run_kwd5 "hasEntry #{wallet_id} #{folder} #{key} #{APP_NAME}"
  if value == "true"
    vputs "Key '#{key}' exists in foldbager '#{folder}'"
  else
    vputs "Key '#{key}' does not exist in folder '#{folder}'"
  end
  value == "true"
end

# Calls the removeEntry. Used to delete a value in a wallet > folder.
def remove_entry(wallet_id, folder, key)
  output = run_kwd5 "removeEntry #{wallet_id} #{folder} #{key} #{APP_NAME}"
  if output == "0"
    vputs "Removed entry with key '#{key}' from #{wallet_id} > #{folder}"
  elsif output == "-3"
    vputs "Failed to remove entry with key '#{key}' from #{wallet_id} > #{folder} because the entry does not exist."
  else
    vputs "Failed to remove entry with key '#{key}' from #{wallet_id} > #{folder}. Likely because authentication failed."
  end
end


# 3. Control Flow Functions
#     These functions provide the behaviour that git-credential needs. Git-credential
#     calls this program with one of three arguments (get, store, erase). Then the
#     credentials are passed via STDIN.
#
#     The username/password pairs are stored per domain (as git-credential requires).
#     They are stored as a string with the format A-B:C where:
#         - A is the length of the username.
#         - B is the username.
#         - C is the password.
#
#     This format means that the only limits on the contents of the username/password
#     are the limits set by git-credentials (namely: the fields cannot contain a
#     newline or the NUL (\0) character).

# Sends the updated credentials back to git-credential by outputing them to STDOUT
def send creds
    creds.each_pair {|kv|
      puts "#{kv[0]}=#{kv[1]}"}
end

# Functionality for the GET case.
def get creds
  if !creds["host"].nil?
    wallet_id = get_wallet_id "kdewallet"
    value = get_entry(wallet_id, KWALLET_FOLDER, creds["host"])

    username_length = value.match(/^\d+-/)
    if username_length
      username_length = username_length[0][0..2].to_i
      value = value.split('-')[1..-1].join('-')

      new_creds = creds.clone
      new_creds[:username] = value[0.. username_length - 1 ]
      new_creds[:password] = value[ username_length + 1..-1]
      send new_creds
    end
  end
end

# Functionality for the STORE case. Handles the case where a 'git-credential' folder
# does not exist.
def store creds
  if !creds["host"].nil?
    wallet_id = get_wallet_id "kdewallet"

    if !has_folder(wallet_id, KWALLET_FOLDER)
      create_folder(wallet_id, KWALLET_FOLDER)
    end

    username = !creds["username"].nil? ? creds["username"] : ""
    password = !creds["password"].nil? ? creds["password"] : ""
    write_entry(wallet_id, KWALLET_FOLDER, creds["host"], "#{username.length}-#{username}:#{password}")
  end
end

# Functionality for the ERASE case.
def erase creds
  if !creds["host"].nil?
    wallet_id = get_wallet_id "kdewallet"
    remove_entry(wallet_id, KWALLET_FOLDER, creds["host"])
  end
end

# Main control flow - parses the arguments and calls the relevant functions.
def run
  if ARGV.length != 1 or ["-h", "--help"].include?( ARGV[0])
    puts "Useage: git-kwallet-git-credentials command"
    puts "\tCredentials are read from stdin per git-credential specifications."
    puts ""
    puts "Commands:"
    puts "\tget   :    Returns a matching credential."
    puts "\tstore :    Stores a credential."
    puts "\terase :    Removes a credential (if it exists)."
    exit 0
  end

  creds = {}
  STDIN.read.split("\n").each { |line|
    kv = line.split("=")
    creds[kv[0]] = kv[1]
  }

  case ARGV[0]
  when "get"
      get creds
    when "store"
      store creds
    when "erase"
      erase creds
    else
      STDERR.puts "Error in git-credential-with-kwallet (code: 101) -- Please report @ github.com/epwr/git-credential-with-kwallet"
  end
end

# The following lines set it so that the control flow is only run when the file is
# called, and not when the file is imported by another file. This means that you can
# import the qdbus wrapper functions and use them for another purpose - eg. unit testing.
if __FILE__ == $0
  run
end
